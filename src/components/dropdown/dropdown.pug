include /button/button.pug

mixin dropdown(options)
  -
    const {
      label,
      placeholder = '',
      name = false,
      isOpened = false, 
      variations = {},
      counters = [],
      withControls = false,
      buttonApply = "применить",
      buttonClear = "очистить",
    } = options;

  .dropdown.js-dropdown(class=(isOpened ? "dropdown_opened" : ""), data-variations=JSON.stringify(variations))
    #{label ? 'label' : 'div'}.dropdown__head
      if label
        span.dropdown__label #{label}
      #{label ? 'span' : 'div'}.dropdown__input-wrapper.js-dropdown__input-wrapper
        input.dropdown__input.js-dropdown__input(
          type="text"
          placeholder=placeholder
          name=name
          readonly
        )
        .dropdown__expand-button
          +button({ text: "expand_more", theme: "icon" })
        
    .dropdown__body-wrapper
      if counters.length
        .dropdown__body.js-dropdown__body
          ul.dropdown__counters
            for counter in counters
              -const { text: counterText, group, value = 0 } = counter;
              li.dropdown__counter
                .dropdown__counter-text #{counterText}
                .dropdown__counter-controls
                  button.dropdown__button-change-count(type="button" data-action="minus" disabled=(value === 0)) -
                  output.dropdown__counter-out.js-dropdown__counter-out(data-group=group) #{value}
                  button.dropdown__button-change-count(type="button" data-action="plus") +
          if withControls
            .dropdown__controls
              .dropdown__button-clear
                +button({
                  dataAction: "clear",
                  text: buttonClear,
                  theme: "textual",
                  hidden: true,
                })
              .dropdown__button-apply
                +button({
                  dataAction: "apply",
                  text: buttonApply,
                  theme: "textual",
                })
